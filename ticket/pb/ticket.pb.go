// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: ticket.proto

package pb

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TICKET_TYPE int32

const (
	TICKET_TYPE_UnDefinedType    TICKET_TYPE = 0
	TICKET_TYPE_ClientTicketType TICKET_TYPE = 1
	TICKET_TYPE_AdminTicketType  TICKET_TYPE = 2
)

// Enum value maps for TICKET_TYPE.
var (
	TICKET_TYPE_name = map[int32]string{
		0: "UnDefinedType",
		1: "ClientTicketType",
		2: "AdminTicketType",
	}
	TICKET_TYPE_value = map[string]int32{
		"UnDefinedType":    0,
		"ClientTicketType": 1,
		"AdminTicketType":  2,
	}
)

func (x TICKET_TYPE) Enum() *TICKET_TYPE {
	p := new(TICKET_TYPE)
	*p = x
	return p
}

func (x TICKET_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TICKET_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_proto_enumTypes[0].Descriptor()
}

func (TICKET_TYPE) Type() protoreflect.EnumType {
	return &file_ticket_proto_enumTypes[0]
}

func (x TICKET_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TICKET_TYPE.Descriptor instead.
func (TICKET_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

type ISSUE_STATUS int32

const (
	ISSUE_STATUS_UnDefinedStatus ISSUE_STATUS = 0
	ISSUE_STATUS_OpenStatus      ISSUE_STATUS = 1
	ISSUE_STATUS_ClosedStatus    ISSUE_STATUS = 2
)

// Enum value maps for ISSUE_STATUS.
var (
	ISSUE_STATUS_name = map[int32]string{
		0: "UnDefinedStatus",
		1: "OpenStatus",
		2: "ClosedStatus",
	}
	ISSUE_STATUS_value = map[string]int32{
		"UnDefinedStatus": 0,
		"OpenStatus":      1,
		"ClosedStatus":    2,
	}
)

func (x ISSUE_STATUS) Enum() *ISSUE_STATUS {
	p := new(ISSUE_STATUS)
	*p = x
	return p
}

func (x ISSUE_STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ISSUE_STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_proto_enumTypes[1].Descriptor()
}

func (ISSUE_STATUS) Type() protoreflect.EnumType {
	return &file_ticket_proto_enumTypes[1]
}

func (x ISSUE_STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ISSUE_STATUS.Descriptor instead.
func (ISSUE_STATUS) EnumDescriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

type CLIENT_TYPE int32

const (
	CLIENT_TYPE_UserClientType  CLIENT_TYPE = 0
	CLIENT_TYPE_AdminClientType CLIENT_TYPE = 1
)

// Enum value maps for CLIENT_TYPE.
var (
	CLIENT_TYPE_name = map[int32]string{
		0: "UserClientType",
		1: "AdminClientType",
	}
	CLIENT_TYPE_value = map[string]int32{
		"UserClientType":  0,
		"AdminClientType": 1,
	}
)

func (x CLIENT_TYPE) Enum() *CLIENT_TYPE {
	p := new(CLIENT_TYPE)
	*p = x
	return p
}

func (x CLIENT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CLIENT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_ticket_proto_enumTypes[2].Descriptor()
}

func (CLIENT_TYPE) Type() protoreflect.EnumType {
	return &file_ticket_proto_enumTypes[2]
}

func (x CLIENT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CLIENT_TYPE.Descriptor instead.
func (CLIENT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{2}
}

type Ticket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue               *Issue               `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	Key                 string               `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Content             string               `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CreatedByClient     string               `protobuf:"bytes,4,opt,name=createdByClient,proto3" json:"createdByClient,omitempty"`
	CreatedByClientFlag bool                 `protobuf:"varint,5,opt,name=createdByClientFlag,proto3" json:"createdByClientFlag,omitempty"` // this flag must set as a true value while createdByClient is not nil
	CreatedByAdmin      *User                `protobuf:"bytes,6,opt,name=createdByAdmin,proto3" json:"createdByAdmin,omitempty"`
	CreatedByAdminFlag  bool                 `protobuf:"varint,7,opt,name=createdByAdminFlag,proto3" json:"createdByAdminFlag,omitempty"`
	CreatedAt           *timestamp.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	ViewedByAdmin       *User                `protobuf:"bytes,9,opt,name=viewedByAdmin,proto3" json:"viewedByAdmin,omitempty"`
	ViewedByAdminFlag   bool                 `protobuf:"varint,10,opt,name=viewedByAdminFlag,proto3" json:"viewedByAdminFlag,omitempty"`
	ViewedByAdminAt     *timestamp.Timestamp `protobuf:"bytes,11,opt,name=viewedByAdminAt,proto3" json:"viewedByAdminAt,omitempty"`
	ViewedByAdminAtFlag bool                 `protobuf:"varint,12,opt,name=viewedByAdminAtFlag,proto3" json:"viewedByAdminAtFlag,omitempty"`
	Reference           *Ticket              `protobuf:"bytes,13,opt,name=reference,proto3" json:"reference,omitempty"`
	ReferenceFlag       bool                 `protobuf:"varint,14,opt,name=referenceFlag,proto3" json:"referenceFlag,omitempty"`
	Type                TICKET_TYPE          `protobuf:"varint,15,opt,name=type,proto3,enum=proxy.TICKET_TYPE" json:"type,omitempty"`
}

func (x *Ticket) Reset() {
	*x = Ticket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ticket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ticket) ProtoMessage() {}

func (x *Ticket) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ticket.ProtoReflect.Descriptor instead.
func (*Ticket) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{0}
}

func (x *Ticket) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *Ticket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Ticket) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Ticket) GetCreatedByClient() string {
	if x != nil {
		return x.CreatedByClient
	}
	return ""
}

func (x *Ticket) GetCreatedByClientFlag() bool {
	if x != nil {
		return x.CreatedByClientFlag
	}
	return false
}

func (x *Ticket) GetCreatedByAdmin() *User {
	if x != nil {
		return x.CreatedByAdmin
	}
	return nil
}

func (x *Ticket) GetCreatedByAdminFlag() bool {
	if x != nil {
		return x.CreatedByAdminFlag
	}
	return false
}

func (x *Ticket) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Ticket) GetViewedByAdmin() *User {
	if x != nil {
		return x.ViewedByAdmin
	}
	return nil
}

func (x *Ticket) GetViewedByAdminFlag() bool {
	if x != nil {
		return x.ViewedByAdminFlag
	}
	return false
}

func (x *Ticket) GetViewedByAdminAt() *timestamp.Timestamp {
	if x != nil {
		return x.ViewedByAdminAt
	}
	return nil
}

func (x *Ticket) GetViewedByAdminAtFlag() bool {
	if x != nil {
		return x.ViewedByAdminAtFlag
	}
	return false
}

func (x *Ticket) GetReference() *Ticket {
	if x != nil {
		return x.Reference
	}
	return nil
}

func (x *Ticket) GetReferenceFlag() bool {
	if x != nil {
		return x.ReferenceFlag
	}
	return false
}

func (x *Ticket) GetType() TICKET_TYPE {
	if x != nil {
		return x.Type
	}
	return TICKET_TYPE_UnDefinedType
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub         string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Username    string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Firstname   string `protobuf:"bytes,3,opt,name=firstname,proto3" json:"firstname,omitempty"`
	Lastname    string `protobuf:"bytes,4,opt,name=lastname,proto3" json:"lastname,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	IsSuperUser bool   `protobuf:"varint,6,opt,name=isSuperUser,proto3" json:"isSuperUser,omitempty"`
	IsStuff     bool   `protobuf:"varint,7,opt,name=isStuff,proto3" json:"isStuff,omitempty"`
	IsActive    bool   `protobuf:"varint,8,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetFirstname() string {
	if x != nil {
		return x.Firstname
	}
	return ""
}

func (x *User) GetLastname() string {
	if x != nil {
		return x.Lastname
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetIsSuperUser() bool {
	if x != nil {
		return x.IsSuperUser
	}
	return false
}

func (x *User) GetIsStuff() bool {
	if x != nil {
		return x.IsStuff
	}
	return false
}

func (x *User) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Staffs    []*User              `protobuf:"bytes,2,rep,name=staffs,proto3" json:"staffs,omitempty"`
	CreatedBy *User                `protobuf:"bytes,3,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{2}
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetStaffs() []*User {
	if x != nil {
		return x.Staffs
	}
	return nil
}

func (x *Service) GetCreatedBy() *User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Service) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num                 string               `protobuf:"bytes,1,opt,name=num,proto3" json:"num,omitempty"`
	Service             *Service             `protobuf:"bytes,2,opt,name=Service,proto3" json:"Service,omitempty"`
	ServiceFlag         bool                 `protobuf:"varint,3,opt,name=serviceFlag,proto3" json:"serviceFlag,omitempty"`
	Title               string               `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	CreatedByClient     string               `protobuf:"bytes,5,opt,name=createdByClient,proto3" json:"createdByClient,omitempty"`
	CreatedByClientFlag bool                 `protobuf:"varint,6,opt,name=createdByClientFlag,proto3" json:"createdByClientFlag,omitempty"`
	CreatedByAdmin      *User                `protobuf:"bytes,7,opt,name=createdByAdmin,proto3" json:"createdByAdmin,omitempty"`
	CreatedByAdminFlag  bool                 `protobuf:"varint,8,opt,name=createdByAdminFlag,proto3" json:"createdByAdminFlag,omitempty"`
	CreatedAt           *timestamp.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Status              ISSUE_STATUS         `protobuf:"varint,10,opt,name=status,proto3,enum=proxy.ISSUE_STATUS" json:"status,omitempty"`
	Tickets             []*Ticket            `protobuf:"bytes,11,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Tags                []string             `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{3}
}

func (x *Issue) GetNum() string {
	if x != nil {
		return x.Num
	}
	return ""
}

func (x *Issue) GetService() *Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Issue) GetServiceFlag() bool {
	if x != nil {
		return x.ServiceFlag
	}
	return false
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetCreatedByClient() string {
	if x != nil {
		return x.CreatedByClient
	}
	return ""
}

func (x *Issue) GetCreatedByClientFlag() bool {
	if x != nil {
		return x.CreatedByClientFlag
	}
	return false
}

func (x *Issue) GetCreatedByAdmin() *User {
	if x != nil {
		return x.CreatedByAdmin
	}
	return nil
}

func (x *Issue) GetCreatedByAdminFlag() bool {
	if x != nil {
		return x.CreatedByAdminFlag
	}
	return false
}

func (x *Issue) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Issue) GetStatus() ISSUE_STATUS {
	if x != nil {
		return x.Status
	}
	return ISSUE_STATUS_UnDefinedStatus
}

func (x *Issue) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *Issue) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserType string `protobuf:"bytes,1,opt,name=userType,proto3" json:"userType,omitempty"`
	Sub      string `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{4}
}

func (x *JoinRequest) GetUserType() string {
	if x != nil {
		return x.UserType
	}
	return ""
}

func (x *JoinRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId        string  `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	SessionIdAtFirst bool    `protobuf:"varint,2,opt,name=sessionIdAtFirst,proto3" json:"sessionIdAtFirst,omitempty"`
	ReceivedMessage  *Ticket `protobuf:"bytes,3,opt,name=receivedMessage,proto3" json:"receivedMessage,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{5}
}

func (x *JoinResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinResponse) GetSessionIdAtFirst() bool {
	if x != nil {
		return x.SessionIdAtFirst
	}
	return false
}

func (x *JoinResponse) GetReceivedMessage() *Ticket {
	if x != nil {
		return x.ReceivedMessage
	}
	return nil
}

type LeftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub     string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Session string `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *LeftRequest) Reset() {
	*x = LeftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftRequest) ProtoMessage() {}

func (x *LeftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftRequest.ProtoReflect.Descriptor instead.
func (*LeftRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{6}
}

func (x *LeftRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *LeftRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type LeftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LeftResponse) Reset() {
	*x = LeftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftResponse) ProtoMessage() {}

func (x *LeftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftResponse.ProtoReflect.Descriptor instead.
func (*LeftResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{7}
}

func (x *LeftResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendNewTicketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     CLIENT_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
	Sub      string      `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	IssueNum string      `protobuf:"bytes,3,opt,name=issueNum,proto3" json:"issueNum,omitempty"`
	Content  string      `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *SendNewTicketRequest) Reset() {
	*x = SendNewTicketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNewTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNewTicketRequest) ProtoMessage() {}

func (x *SendNewTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNewTicketRequest.ProtoReflect.Descriptor instead.
func (*SendNewTicketRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{8}
}

func (x *SendNewTicketRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

func (x *SendNewTicketRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *SendNewTicketRequest) GetIssueNum() string {
	if x != nil {
		return x.IssueNum
	}
	return ""
}

func (x *SendNewTicketRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SendNewTicketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket    *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
	IsNotNull bool    `protobuf:"varint,2,opt,name=isNotNull,proto3" json:"isNotNull,omitempty"`
}

func (x *SendNewTicketResponse) Reset() {
	*x = SendNewTicketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendNewTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendNewTicketResponse) ProtoMessage() {}

func (x *SendNewTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendNewTicketResponse.ProtoReflect.Descriptor instead.
func (*SendNewTicketResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{9}
}

func (x *SendNewTicketResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

func (x *SendNewTicketResponse) GetIsNotNull() bool {
	if x != nil {
		return x.IsNotNull
	}
	return false
}

type ListenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
}

func (x *ListenRequest) Reset() {
	*x = ListenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenRequest) ProtoMessage() {}

func (x *ListenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenRequest.ProtoReflect.Descriptor instead.
func (*ListenRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{10}
}

func (x *ListenRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticket *Ticket `protobuf:"bytes,1,opt,name=ticket,proto3" json:"ticket,omitempty"`
}

func (x *ListenResponse) Reset() {
	*x = ListenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenResponse) ProtoMessage() {}

func (x *ListenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenResponse.ProtoReflect.Descriptor instead.
func (*ListenResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{11}
}

func (x *ListenResponse) GetTicket() *Ticket {
	if x != nil {
		return x.Ticket
	}
	return nil
}

type ReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         CLIENT_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
	Sub          string      `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	IssueNum     string      `protobuf:"bytes,3,opt,name=issueNum,proto3" json:"issueNum,omitempty"`
	Content      string      `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	ReferenceKey string      `protobuf:"bytes,5,opt,name=referenceKey,proto3" json:"referenceKey,omitempty"`
}

func (x *ReplyRequest) Reset() {
	*x = ReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyRequest) ProtoMessage() {}

func (x *ReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyRequest.ProtoReflect.Descriptor instead.
func (*ReplyRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{12}
}

func (x *ReplyRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

func (x *ReplyRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *ReplyRequest) GetIssueNum() string {
	if x != nil {
		return x.IssueNum
	}
	return ""
}

func (x *ReplyRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ReplyRequest) GetReferenceKey() string {
	if x != nil {
		return x.ReferenceKey
	}
	return ""
}

type OpenIssueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        CLIENT_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
	Sub         string      `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	ServiceName string      `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	Title       string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Tags        []string    `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *OpenIssueRequest) Reset() {
	*x = OpenIssueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIssueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIssueRequest) ProtoMessage() {}

func (x *OpenIssueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIssueRequest.ProtoReflect.Descriptor instead.
func (*OpenIssueRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{13}
}

func (x *OpenIssueRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

func (x *OpenIssueRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *OpenIssueRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *OpenIssueRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OpenIssueRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type OpenIssueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue     *Issue `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	IsNotNull bool   `protobuf:"varint,2,opt,name=isNotNull,proto3" json:"isNotNull,omitempty"`
}

func (x *OpenIssueResponse) Reset() {
	*x = OpenIssueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIssueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIssueResponse) ProtoMessage() {}

func (x *OpenIssueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIssueResponse.ProtoReflect.Descriptor instead.
func (*OpenIssueResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{14}
}

func (x *OpenIssueResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

func (x *OpenIssueResponse) GetIsNotNull() bool {
	if x != nil {
		return x.IsNotNull
	}
	return false
}

type ListTicketFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issue string `protobuf:"bytes,1,opt,name=issue,proto3" json:"issue,omitempty"`
	Skip  int32  `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	Limit int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListTicketFilter) Reset() {
	*x = ListTicketFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketFilter) ProtoMessage() {}

func (x *ListTicketFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketFilter.ProtoReflect.Descriptor instead.
func (*ListTicketFilter) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{15}
}

func (x *ListTicketFilter) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *ListTicketFilter) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *ListTicketFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListTicketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueNumber string            `protobuf:"bytes,1,opt,name=issueNumber,proto3" json:"issueNumber,omitempty"`
	Type        CLIENT_TYPE       `protobuf:"varint,2,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
	Sub         string            `protobuf:"bytes,3,opt,name=sub,proto3" json:"sub,omitempty"`
	Filter      *ListTicketFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListTicketsRequest) Reset() {
	*x = ListTicketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsRequest) ProtoMessage() {}

func (x *ListTicketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsRequest.ProtoReflect.Descriptor instead.
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{16}
}

func (x *ListTicketsRequest) GetIssueNumber() string {
	if x != nil {
		return x.IssueNumber
	}
	return ""
}

func (x *ListTicketsRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

func (x *ListTicketsRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *ListTicketsRequest) GetFilter() *ListTicketFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListTicketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tickets []*Ticket `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	Issue   *Issue    `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
}

func (x *ListTicketsResponse) Reset() {
	*x = ListTicketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTicketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTicketsResponse) ProtoMessage() {}

func (x *ListTicketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTicketsResponse.ProtoReflect.Descriptor instead.
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{17}
}

func (x *ListTicketsResponse) GetTickets() []*Ticket {
	if x != nil {
		return x.Tickets
	}
	return nil
}

func (x *ListTicketsResponse) GetIssue() *Issue {
	if x != nil {
		return x.Issue
	}
	return nil
}

type JoinNavbarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           CLIENT_TYPE `protobuf:"varint,1,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
	Sub            string      `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	OlderSessionId string      `protobuf:"bytes,3,opt,name=olderSessionId,proto3" json:"olderSessionId,omitempty"`
}

func (x *JoinNavbarRequest) Reset() {
	*x = JoinNavbarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNavbarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNavbarRequest) ProtoMessage() {}

func (x *JoinNavbarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNavbarRequest.ProtoReflect.Descriptor instead.
func (*JoinNavbarRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{18}
}

func (x *JoinNavbarRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

func (x *JoinNavbarRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JoinNavbarRequest) GetOlderSessionId() string {
	if x != nil {
		return x.OlderSessionId
	}
	return ""
}

type JoinNavbarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId       string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	AtFirstResponse bool   `protobuf:"varint,2,opt,name=atFirstResponse,proto3" json:"atFirstResponse,omitempty"`
	Unread          uint32 `protobuf:"varint,3,opt,name=unread,proto3" json:"unread,omitempty"`
}

func (x *JoinNavbarResponse) Reset() {
	*x = JoinNavbarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinNavbarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinNavbarResponse) ProtoMessage() {}

func (x *JoinNavbarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinNavbarResponse.ProtoReflect.Descriptor instead.
func (*JoinNavbarResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{19}
}

func (x *JoinNavbarResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinNavbarResponse) GetAtFirstResponse() bool {
	if x != nil {
		return x.AtFirstResponse
	}
	return false
}

func (x *JoinNavbarResponse) GetUnread() uint32 {
	if x != nil {
		return x.Unread
	}
	return 0
}

type MarkAsReadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Sub  string      `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`
	Type CLIENT_TYPE `protobuf:"varint,3,opt,name=type,proto3,enum=proxy.CLIENT_TYPE" json:"type,omitempty"`
}

func (x *MarkAsReadRequest) Reset() {
	*x = MarkAsReadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsReadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadRequest) ProtoMessage() {}

func (x *MarkAsReadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadRequest.ProtoReflect.Descriptor instead.
func (*MarkAsReadRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{20}
}

func (x *MarkAsReadRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MarkAsReadRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *MarkAsReadRequest) GetType() CLIENT_TYPE {
	if x != nil {
		return x.Type
	}
	return CLIENT_TYPE_UserClientType
}

type MarkAsReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkAsReadResponse) Reset() {
	*x = MarkAsReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsReadResponse) ProtoMessage() {}

func (x *MarkAsReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsReadResponse.ProtoReflect.Descriptor instead.
func (*MarkAsReadResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{21}
}

type LeftNavbarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sub     string `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Session string `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *LeftNavbarRequest) Reset() {
	*x = LeftNavbarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftNavbarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftNavbarRequest) ProtoMessage() {}

func (x *LeftNavbarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftNavbarRequest.ProtoReflect.Descriptor instead.
func (*LeftNavbarRequest) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{22}
}

func (x *LeftNavbarRequest) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *LeftNavbarRequest) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

type LeftNavbarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LeftNavbarResponse) Reset() {
	*x = LeftNavbarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticket_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeftNavbarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeftNavbarResponse) ProtoMessage() {}

func (x *LeftNavbarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ticket_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeftNavbarResponse.ProtoReflect.Descriptor instead.
func (*LeftNavbarResponse) Descriptor() ([]byte, []int) {
	return file_ticket_proto_rawDescGZIP(), []int{23}
}

var File_ticket_proto protoreflect.FileDescriptor

var file_ticket_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa7, 0x05, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x0d,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x52, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x44, 0x0a,
	0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x54,
	0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xdc, 0x01, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x53,
	0x74, 0x75, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x74,
	0x75, 0x66, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x66, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x66, 0x66, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x03, 0x0a, 0x05, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x33, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52,
	0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x0b,
	0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x22, 0x91, 0x01, 0x0a, 0x0c, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x41, 0x74, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x0f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x0a,
	0x0b, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0c, 0x4c, 0x65, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x2d, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x22, 0xa2, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x55, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x52, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa1, 0x01, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12,
	0x2f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x62, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x22, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x05, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x76, 0x62,
	0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x73, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x12, 0x4a,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x22, 0x5f, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x11, 0x4c, 0x65, 0x66, 0x74,
	0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x65, 0x66,
	0x74, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a,
	0x4b, 0x0a, 0x0b, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x2a, 0x45, 0x0a, 0x0c,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x13, 0x0a, 0x0f,
	0x55, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x10, 0x02, 0x2a, 0x36, 0x0a, 0x0b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x32, 0xa0, 0x05, 0x0a, 0x0d,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x31, 0x0a, 0x04, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c,
	0x0a, 0x05, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x41, 0x73, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x49, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x45, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x76,
	0x62, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x4c, 0x65, 0x66,
	0x74, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x4c, 0x65, 0x66, 0x74, 0x4e, 0x61, 0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x4c, 0x65, 0x66, 0x74, 0x4e, 0x61,
	0x76, 0x62, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d,
	0x5a, 0x0b, 0x2e, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticket_proto_rawDescOnce sync.Once
	file_ticket_proto_rawDescData = file_ticket_proto_rawDesc
)

func file_ticket_proto_rawDescGZIP() []byte {
	file_ticket_proto_rawDescOnce.Do(func() {
		file_ticket_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticket_proto_rawDescData)
	})
	return file_ticket_proto_rawDescData
}

var file_ticket_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_ticket_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_ticket_proto_goTypes = []interface{}{
	(TICKET_TYPE)(0),              // 0: proxy.TICKET_TYPE
	(ISSUE_STATUS)(0),             // 1: proxy.ISSUE_STATUS
	(CLIENT_TYPE)(0),              // 2: proxy.CLIENT_TYPE
	(*Ticket)(nil),                // 3: proxy.ticket
	(*User)(nil),                  // 4: proxy.user
	(*Service)(nil),               // 5: proxy.Service
	(*Issue)(nil),                 // 6: proxy.issue
	(*JoinRequest)(nil),           // 7: proxy.JoinRequest
	(*JoinResponse)(nil),          // 8: proxy.JoinResponse
	(*LeftRequest)(nil),           // 9: proxy.LeftRequest
	(*LeftResponse)(nil),          // 10: proxy.LeftResponse
	(*SendNewTicketRequest)(nil),  // 11: proxy.SendNewTicketRequest
	(*SendNewTicketResponse)(nil), // 12: proxy.SendNewTicketResponse
	(*ListenRequest)(nil),         // 13: proxy.ListenRequest
	(*ListenResponse)(nil),        // 14: proxy.ListenResponse
	(*ReplyRequest)(nil),          // 15: proxy.ReplyRequest
	(*OpenIssueRequest)(nil),      // 16: proxy.OpenIssueRequest
	(*OpenIssueResponse)(nil),     // 17: proxy.OpenIssueResponse
	(*ListTicketFilter)(nil),      // 18: proxy.listTicketFilter
	(*ListTicketsRequest)(nil),    // 19: proxy.ListTicketsRequest
	(*ListTicketsResponse)(nil),   // 20: proxy.ListTicketsResponse
	(*JoinNavbarRequest)(nil),     // 21: proxy.JoinNavbarRequest
	(*JoinNavbarResponse)(nil),    // 22: proxy.JoinNavbarResponse
	(*MarkAsReadRequest)(nil),     // 23: proxy.MarkAsReadRequest
	(*MarkAsReadResponse)(nil),    // 24: proxy.MarkAsReadResponse
	(*LeftNavbarRequest)(nil),     // 25: proxy.LeftNavbarRequest
	(*LeftNavbarResponse)(nil),    // 26: proxy.LeftNavbarResponse
	(*timestamp.Timestamp)(nil),   // 27: google.protobuf.Timestamp
}
var file_ticket_proto_depIdxs = []int32{
	6,  // 0: proxy.ticket.issue:type_name -> proxy.issue
	4,  // 1: proxy.ticket.createdByAdmin:type_name -> proxy.user
	27, // 2: proxy.ticket.createdAt:type_name -> google.protobuf.Timestamp
	4,  // 3: proxy.ticket.viewedByAdmin:type_name -> proxy.user
	27, // 4: proxy.ticket.viewedByAdminAt:type_name -> google.protobuf.Timestamp
	3,  // 5: proxy.ticket.reference:type_name -> proxy.ticket
	0,  // 6: proxy.ticket.type:type_name -> proxy.TICKET_TYPE
	4,  // 7: proxy.Service.staffs:type_name -> proxy.user
	4,  // 8: proxy.Service.createdBy:type_name -> proxy.user
	27, // 9: proxy.Service.createdAt:type_name -> google.protobuf.Timestamp
	5,  // 10: proxy.issue.Service:type_name -> proxy.Service
	4,  // 11: proxy.issue.createdByAdmin:type_name -> proxy.user
	27, // 12: proxy.issue.createdAt:type_name -> google.protobuf.Timestamp
	1,  // 13: proxy.issue.status:type_name -> proxy.ISSUE_STATUS
	3,  // 14: proxy.issue.tickets:type_name -> proxy.ticket
	3,  // 15: proxy.JoinResponse.receivedMessage:type_name -> proxy.ticket
	2,  // 16: proxy.SendNewTicketRequest.type:type_name -> proxy.CLIENT_TYPE
	3,  // 17: proxy.SendNewTicketResponse.ticket:type_name -> proxy.ticket
	3,  // 18: proxy.ListenResponse.ticket:type_name -> proxy.ticket
	2,  // 19: proxy.ReplyRequest.type:type_name -> proxy.CLIENT_TYPE
	2,  // 20: proxy.OpenIssueRequest.type:type_name -> proxy.CLIENT_TYPE
	6,  // 21: proxy.OpenIssueResponse.issue:type_name -> proxy.issue
	2,  // 22: proxy.ListTicketsRequest.type:type_name -> proxy.CLIENT_TYPE
	18, // 23: proxy.ListTicketsRequest.filter:type_name -> proxy.listTicketFilter
	3,  // 24: proxy.ListTicketsResponse.tickets:type_name -> proxy.ticket
	6,  // 25: proxy.ListTicketsResponse.issue:type_name -> proxy.issue
	2,  // 26: proxy.JoinNavbarRequest.type:type_name -> proxy.CLIENT_TYPE
	2,  // 27: proxy.MarkAsReadRequest.type:type_name -> proxy.CLIENT_TYPE
	7,  // 28: proxy.TicketService.Join:input_type -> proxy.JoinRequest
	9,  // 29: proxy.TicketService.Left:input_type -> proxy.LeftRequest
	11, // 30: proxy.TicketService.SendNewTicket:input_type -> proxy.SendNewTicketRequest
	13, // 31: proxy.TicketService.Listen:input_type -> proxy.ListenRequest
	15, // 32: proxy.TicketService.Reply:input_type -> proxy.ReplyRequest
	16, // 33: proxy.TicketService.OpenIssue:input_type -> proxy.OpenIssueRequest
	23, // 34: proxy.TicketService.MarkAsRead:input_type -> proxy.MarkAsReadRequest
	19, // 35: proxy.TicketService.ListTicketsInIssue:input_type -> proxy.ListTicketsRequest
	21, // 36: proxy.TicketService.JoinNavbar:input_type -> proxy.JoinNavbarRequest
	25, // 37: proxy.TicketService.LeftNavbar:input_type -> proxy.LeftNavbarRequest
	8,  // 38: proxy.TicketService.Join:output_type -> proxy.JoinResponse
	10, // 39: proxy.TicketService.Left:output_type -> proxy.LeftResponse
	12, // 40: proxy.TicketService.SendNewTicket:output_type -> proxy.SendNewTicketResponse
	14, // 41: proxy.TicketService.Listen:output_type -> proxy.ListenResponse
	12, // 42: proxy.TicketService.Reply:output_type -> proxy.SendNewTicketResponse
	17, // 43: proxy.TicketService.OpenIssue:output_type -> proxy.OpenIssueResponse
	24, // 44: proxy.TicketService.MarkAsRead:output_type -> proxy.MarkAsReadResponse
	20, // 45: proxy.TicketService.ListTicketsInIssue:output_type -> proxy.ListTicketsResponse
	22, // 46: proxy.TicketService.JoinNavbar:output_type -> proxy.JoinNavbarResponse
	26, // 47: proxy.TicketService.LeftNavbar:output_type -> proxy.LeftNavbarResponse
	38, // [38:48] is the sub-list for method output_type
	28, // [28:38] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_ticket_proto_init() }
func file_ticket_proto_init() {
	if File_ticket_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticket_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ticket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendNewTicketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendNewTicketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIssueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenIssueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTicketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNavbarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinNavbarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsReadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftNavbarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticket_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeftNavbarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticket_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ticket_proto_goTypes,
		DependencyIndexes: file_ticket_proto_depIdxs,
		EnumInfos:         file_ticket_proto_enumTypes,
		MessageInfos:      file_ticket_proto_msgTypes,
	}.Build()
	File_ticket_proto = out.File
	file_ticket_proto_rawDesc = nil
	file_ticket_proto_goTypes = nil
	file_ticket_proto_depIdxs = nil
}
