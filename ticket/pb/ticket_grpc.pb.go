// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ticket.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketServiceClient is the client API for TicketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (TicketService_JoinClient, error)
	Left(ctx context.Context, in *LeftRequest, opts ...grpc.CallOption) (*LeftResponse, error)
	SendNewTicket(ctx context.Context, in *SendNewTicketRequest, opts ...grpc.CallOption) (*SendNewTicketResponse, error)
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (TicketService_ListenClient, error)
	Reply(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*SendNewTicketResponse, error)
	OpenIssue(ctx context.Context, in *OpenIssueRequest, opts ...grpc.CallOption) (*OpenIssueResponse, error)
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	ListTicketsInIssue(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	JoinNavbar(ctx context.Context, in *JoinNavbarRequest, opts ...grpc.CallOption) (TicketService_JoinNavbarClient, error)
	LeftNavbar(ctx context.Context, in *LeftNavbarRequest, opts ...grpc.CallOption) (*LeftNavbarResponse, error)
}

type ticketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketServiceClient(cc grpc.ClientConnInterface) TicketServiceClient {
	return &ticketServiceClient{cc}
}

func (c *ticketServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (TicketService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[0], "/proxy.TicketService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketService_JoinClient interface {
	Recv() (*JoinResponse, error)
	grpc.ClientStream
}

type ticketServiceJoinClient struct {
	grpc.ClientStream
}

func (x *ticketServiceJoinClient) Recv() (*JoinResponse, error) {
	m := new(JoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketServiceClient) Left(ctx context.Context, in *LeftRequest, opts ...grpc.CallOption) (*LeftResponse, error) {
	out := new(LeftResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/Left", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) SendNewTicket(ctx context.Context, in *SendNewTicketRequest, opts ...grpc.CallOption) (*SendNewTicketResponse, error) {
	out := new(SendNewTicketResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/SendNewTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (TicketService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[1], "/proxy.TicketService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type ticketServiceListenClient struct {
	grpc.ClientStream
}

func (x *ticketServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketServiceClient) Reply(ctx context.Context, in *ReplyRequest, opts ...grpc.CallOption) (*SendNewTicketResponse, error) {
	out := new(SendNewTicketResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) OpenIssue(ctx context.Context, in *OpenIssueRequest, opts ...grpc.CallOption) (*OpenIssueResponse, error) {
	out := new(OpenIssueResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/OpenIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/MarkAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) ListTicketsInIssue(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/ListTicketsInIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketServiceClient) JoinNavbar(ctx context.Context, in *JoinNavbarRequest, opts ...grpc.CallOption) (TicketService_JoinNavbarClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicketService_ServiceDesc.Streams[2], "/proxy.TicketService/JoinNavbar", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticketServiceJoinNavbarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicketService_JoinNavbarClient interface {
	Recv() (*JoinNavbarResponse, error)
	grpc.ClientStream
}

type ticketServiceJoinNavbarClient struct {
	grpc.ClientStream
}

func (x *ticketServiceJoinNavbarClient) Recv() (*JoinNavbarResponse, error) {
	m := new(JoinNavbarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticketServiceClient) LeftNavbar(ctx context.Context, in *LeftNavbarRequest, opts ...grpc.CallOption) (*LeftNavbarResponse, error) {
	out := new(LeftNavbarResponse)
	err := c.cc.Invoke(ctx, "/proxy.TicketService/LeftNavbar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServiceServer is the server API for TicketService service.
// All implementations must embed UnimplementedTicketServiceServer
// for forward compatibility
type TicketServiceServer interface {
	Join(*JoinRequest, TicketService_JoinServer) error
	Left(context.Context, *LeftRequest) (*LeftResponse, error)
	SendNewTicket(context.Context, *SendNewTicketRequest) (*SendNewTicketResponse, error)
	Listen(*ListenRequest, TicketService_ListenServer) error
	Reply(context.Context, *ReplyRequest) (*SendNewTicketResponse, error)
	OpenIssue(context.Context, *OpenIssueRequest) (*OpenIssueResponse, error)
	MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error)
	ListTicketsInIssue(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	JoinNavbar(*JoinNavbarRequest, TicketService_JoinNavbarServer) error
	LeftNavbar(context.Context, *LeftNavbarRequest) (*LeftNavbarResponse, error)
	mustEmbedUnimplementedTicketServiceServer()
}

// UnimplementedTicketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServiceServer struct {
}

func (UnimplementedTicketServiceServer) Join(*JoinRequest, TicketService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedTicketServiceServer) Left(context.Context, *LeftRequest) (*LeftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Left not implemented")
}
func (UnimplementedTicketServiceServer) SendNewTicket(context.Context, *SendNewTicketRequest) (*SendNewTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNewTicket not implemented")
}
func (UnimplementedTicketServiceServer) Listen(*ListenRequest, TicketService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedTicketServiceServer) Reply(context.Context, *ReplyRequest) (*SendNewTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedTicketServiceServer) OpenIssue(context.Context, *OpenIssueRequest) (*OpenIssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIssue not implemented")
}
func (UnimplementedTicketServiceServer) MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedTicketServiceServer) ListTicketsInIssue(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTicketsInIssue not implemented")
}
func (UnimplementedTicketServiceServer) JoinNavbar(*JoinNavbarRequest, TicketService_JoinNavbarServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinNavbar not implemented")
}
func (UnimplementedTicketServiceServer) LeftNavbar(context.Context, *LeftNavbarRequest) (*LeftNavbarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftNavbar not implemented")
}
func (UnimplementedTicketServiceServer) mustEmbedUnimplementedTicketServiceServer() {}

// UnsafeTicketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServiceServer will
// result in compilation errors.
type UnsafeTicketServiceServer interface {
	mustEmbedUnimplementedTicketServiceServer()
}

func RegisterTicketServiceServer(s grpc.ServiceRegistrar, srv TicketServiceServer) {
	s.RegisterService(&TicketService_ServiceDesc, srv)
}

func _TicketService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).Join(m, &ticketServiceJoinServer{stream})
}

type TicketService_JoinServer interface {
	Send(*JoinResponse) error
	grpc.ServerStream
}

type ticketServiceJoinServer struct {
	grpc.ServerStream
}

func (x *ticketServiceJoinServer) Send(m *JoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TicketService_Left_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Left(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/Left",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Left(ctx, req.(*LeftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_SendNewTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNewTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).SendNewTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/SendNewTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).SendNewTicket(ctx, req.(*SendNewTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).Listen(m, &ticketServiceListenServer{stream})
}

type TicketService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type ticketServiceListenServer struct {
	grpc.ServerStream
}

func (x *ticketServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TicketService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).Reply(ctx, req.(*ReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_OpenIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).OpenIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/OpenIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).OpenIssue(ctx, req.(*OpenIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/MarkAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).MarkAsRead(ctx, req.(*MarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_ListTicketsInIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).ListTicketsInIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/ListTicketsInIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).ListTicketsInIssue(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketService_JoinNavbar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinNavbarRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicketServiceServer).JoinNavbar(m, &ticketServiceJoinNavbarServer{stream})
}

type TicketService_JoinNavbarServer interface {
	Send(*JoinNavbarResponse) error
	grpc.ServerStream
}

type ticketServiceJoinNavbarServer struct {
	grpc.ServerStream
}

func (x *ticketServiceJoinNavbarServer) Send(m *JoinNavbarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TicketService_LeftNavbar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeftNavbarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServiceServer).LeftNavbar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proxy.TicketService/LeftNavbar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServiceServer).LeftNavbar(ctx, req.(*LeftNavbarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketService_ServiceDesc is the grpc.ServiceDesc for TicketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.TicketService",
	HandlerType: (*TicketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Left",
			Handler:    _TicketService_Left_Handler,
		},
		{
			MethodName: "SendNewTicket",
			Handler:    _TicketService_SendNewTicket_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _TicketService_Reply_Handler,
		},
		{
			MethodName: "OpenIssue",
			Handler:    _TicketService_OpenIssue_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _TicketService_MarkAsRead_Handler,
		},
		{
			MethodName: "ListTicketsInIssue",
			Handler:    _TicketService_ListTicketsInIssue_Handler,
		},
		{
			MethodName: "LeftNavbar",
			Handler:    _TicketService_LeftNavbar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _TicketService_Join_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _TicketService_Listen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinNavbar",
			Handler:       _TicketService_JoinNavbar_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ticket.proto",
}
